services:
  nginx:
    container_name: nginx
    build: ./requirements/nginx # defines how to create the Docker image
    ports:
      - "443:443"
    depends_on:
      - redis
    volumes:
      - wf:/var/www/html
    restart: on-failure # container have to restart in case of a crash
    networks:
      - web

  wordpress:
    container_name: wordpress
    build: ./requirements/wordpress
    env_file:
      - .env
    volumes:
      - wf:/var/www/html
    restart: on-failure
    depends_on:
      - mariadb # will compose mariadb first and remove wordpress before mariadb
    networks:
      - web

  mariadb:
    container_name: mariadb
    build: ./requirements/mariadb
    env_file: 
      - .env
    volumes:
      - db:/var/lib/mysql
    restart: on-failure
    networks:
      - web
  
  redis:
    container_name: redis
    build: ./requirements/bonus/redis
    depends_on:
      - wordpress
    ports:
      - "6379:6379"
    restart: on-failure
    env_file:
      - .env
    volumes:
      - wf:/var/www/html
    networks:
      - web
  
  ftp:
    container_name: ftp
    build:
      context: ./requirements/bonus/ftp
      args:
        FTP_USER: ${FTP_USER}
        FTP_PASSWORD: ${FTP_PASSWORD}
    restart: on-failure
    env_file:
      - .env
    ports:
      - "21:21"
      - "21100-21110:21100-21110"
    volumes:
      - wf:/home/ftpuser/wordpress
    networks:
      - web
  
  pelican:
    container_name: pelican
    build: ./requirements/bonus/pelican
    depends_on:
      - wordpress
    restart: on-failure
    env_file:
      - .env
    volumes:
      - wf:/var/www/html/
    networks:
      - web

volumes:
  db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/root_user/data/db
  wf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/root_user/data/wf

networks:
  web:
    driver: bridge
